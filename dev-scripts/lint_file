#!/usr/bin/env -S node
'use strict';
/** @file: dev-scripts/lint_file */
/*
 *
 */;
import fs from 'fs';
import path from 'path';
import * as child_process from 'child_process';

class CustomRuleError extends Error {
    constructor(message) {
        super(message);
        this.name = 'CustomRuleError';
    }
}

// ======================================================================
// Запуск скрипта с аргументами командной строки

if (!process.argv[2]) {
    console.error('\n\x1B[1;31mНеобходимо указать путь к файлу\x1B[0m\n');
    process.exit(1);
}

if (!fs.existsSync(process.argv[2])) {
    console.error('\n\x1B[1;31mФайл должен существовать\x1B[0m\n');
    process.exit(1);
}

if (!fs.statSync(process.argv[2]).isFile()) {
    console.error('\n\x1B[1;31mОжидается регулярный файл\x1B[0m\n');
    process.exit(1);
}

if (!process.argv[2].endsWith('.ts')) {
    console.error('\n\x1B[1;31mОжидается файл с расширением .ts\x1B[0m\n');
    process.exit(1);
}

// ======================================================================

const project_root = (() => {

    try {
        return child_process.execSync('git rev-parse --show-toplevel',
            {
                cwd: path.dirname(path.resolve(process.argv[2])),
                encoding: 'utf-8'
            }).trim();
    } catch (e) {
        throw new Error('\n\x1B[1;31mНе удалось определить корень проекта через Git. Убедитесь, что скрипт запущен внутри Git-репозитория.\x1B[0m\n', { cause: e });
    }
})();

const test_file = path.resolve(project_root, process.argv[2]);
console.info(`\nПроверка файла \x1B[4m${test_file}\x1B[0m`);

// ======================================================================

// Дополнительные проверки содержимого файла
try {

    console.info(`\n\x1B[1mПроверка специальных правил:\x1B[0m`);

    const errors = [];

    // Читаем только начало файла (1KB)
    const buffer_size = 1024;
    const fd = fs.openSync(test_file, 'r');
    const buffer = Buffer.alloc(buffer_size);
    const bytes_read = fs.readSync(fd, buffer, 0, buffer_size, 0);
    fs.closeSync(fd);

    const file_header = buffer.toString('utf-8', 0, bytes_read);

    // Вычисляем ожидаемый относительный путь для @file
    const relative_file_path = path.relative(project_root, test_file);

    // Проверка 1: @file комментарий с правильным путем
    const expected_file_comment = `/** @file: ${relative_file_path} */`;
    if (!file_header.includes(expected_file_comment)) {
        errors.push(
            `\n\x1B[1;31mВ заголовке файла должен присутствовать комментарий:\x1B[0m`,
            `\x1B[33m${expected_file_comment}\x1B[0m`
        );
    }

    // Проверка 2: @license комментарий
    const expected_license_comment = '/** @license: https://www.gnu.org/licenses/gpl.txt */';
    if (!file_header.includes(expected_license_comment)) {
        errors.push(
            '\n\x1B[1;31mВ заголовке файла должен присутствовать комментарий:\x1B[0m',
            `\x1B[33m${expected_license_comment}\x1B[0m`
        );
    }

    // Проверка 3: @version комментарий
    const expected_version_comment = '/** @version: ';
    if (!file_header.includes(expected_version_comment)) {
        errors.push(
            '\n\x1B[1;31mВ заголовке файла должен присутствовать комментарий:\x1B[0m',
            `\x1B[33m${expected_version_comment} *.*.* */\x1B[0m`
        );
    }

    const expected_changelog_comment = ' * @changelog';
    if (!file_header.includes(expected_changelog_comment)) {
        errors.push(
            '\n\x1B[1;31mВ заголовке файла должен присутствовать комментарий:\x1B[0m',
            `\x1B[33m/**${expected_changelog_comment} ... */\x1B[0m`
        );
    }

    if (errors.length > 0) {
        errors.forEach(err => console.error(err));
    } else {
        console.info('\x1B[1;32mошибок не обнаружено\x1B[0m');
    }

} catch (e) {
    console.error(`\n\x1B[1;31mОшибка чтения файла: ${e.message}\x1B[0m`);
    process.exit(1);
}

// ======================================================================

try {
    console.info(`\n\x1B[1mПроверка ESLint:\x1B[0m`);
    child_process.execSync(`npx eslint --config "${project_root}/eslint.config.js" --color "${test_file}"`,
        {
            cwd: path.dirname(project_root),
            encoding: 'utf-8'
        }).trim();

    console.info('\x1B[1;32mошибок не обнаружено\x1B[0m');

} catch (e) {
    console.error(e.stdout);
}

console.info('\nПроверка закончена');

process.exit(0);
